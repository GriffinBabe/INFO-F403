@.strP = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1 
 
; Function Attrs: nounwind uwtable 
define void @println(i32 %x) #0 { 
  %1 = alloca i32, align 4 
  store i32 %x, i32* %1, align 4 
  %2 = load i32, i32* %1, align 4 
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.strP, i32 0, i32 0), i32 %2) 
  ret void 
} 
declare i32 @printf(i8*, ...) #1 
declare i32 @getchar() 
 
define i32 @readInt() { 
entry:                                 ; create variables 
  ; encoded in base 10 
  %res = alloca i32, align 4 
  %digit = alloca i32, align 4 
  store i32 0, i32* %res 
  br label %read 
read:                                   ; read a digit 
  ; gets the last character 
  %0 = call i32 @getchar() 
  %1 = sub i32 %0, 48 ; substracts by 48 
  store i32 %1, i32* %digit ; stores the digit 
  %2 = icmp ne i32 %0, 10 ; checks if it is not the EOL '\n' code 
  br i1 %2, label %save, label %exit 
save: 
  ; load and multiply by 10 
  %3 = load i32, i32* %res 
  %4 = mul i32 %3, 10 
  ; adds the new read digit 
  %5 = add i32 %4, %1 
  store i32 %5, i32* %res 
  br label %read 
                                          ; Do your computations 
 
exit:	                               ; return res 
  %6 = load i32, i32* %res 
  ret i32 %6 
} 
define i32 @main() { 
  entry: 
%a = alloca i32, align 4 
store i32 1 , i32* %a 
%b = alloca i32, align 4 
store i32 1 , i32* %b 
%0 = load i32, i32* %a 
%1 = load i32, i32* %b 
%2 = icmp eq i32 %0, %1 
br i1 %2, label %label0, label %label2 
label0: 
%3 = load i32, i32* %a 
call void @println(i32 %3) 
br label %label3 
label3: 
label2: 
  ret i32 0 
} 
